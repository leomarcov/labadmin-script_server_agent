#!/usr/bin/env bash
#===================================================================================
# LABADMIN SCRIPT SERVER AGENT FOR LINUX
#         FILE: labadmin-script_server_agent
#  DESCRIPTION: Labadmin script server client agent for Linux hosts
#
#       AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#	   LICENSE: GNU General Public License v3.0
#      VERSION: 2024.11
#      CREATED: 2022.06.28
#=================================================================================== 


#===============================================================================
#  GLOBAL VARIABLES
#===============================================================================
readonly agent_path="$(dirname "$(readlink -f "$0")")"					# Agent installed path
readonly hostname=$(hostname)											# Hostname
readonly sshcmd="/opt/labadmin-script_server/lss-srv"					# Labadmin script server command path in remote server
readonly agent_version=$(cat "${agent_path}/version" 2>/dev/null)		# Agent version

# LOAD CONFIG VARIABLES
source "${agent_path}/config"



#=== FUNCTION ==================================================================
#        NAME: log
# DESCRIPTION: write in log file using format: [DATETIME] [ACTION]  EXEC_MSG
#===============================================================================
function log() {
	local action="$1"
	local script="$2"
	local exec_msg="$3"

	action_width=11
	action="[${action^^}]$(seq -s" " 1 $(($action_width-${#action}))|tr -d "[0-9]")"
	[ "$script" ] && script="[$script]"$'\t'

	log_msg="[$(date "+%Y-%m-%d %H:%M:%S")] ${action} ${script}"
	[ "$exec_msg" ] && log_msg="${log_msg}
┌─── EXEC OUTPUT ───────────────────────────────────────────────────────────────────┐
$(echo "${exec_msg}" | sed -e 's/^/ /')
└───────────────────────────────────────────────────────────────────────────────────┘
"
	echo -e "${log_msg}" >> "$log_path"
}


#=== FUNCTION ==================================================================
#        NAME: call_script_server
# DESCRIPTION: call ssh labadmin_script-server manager
# PARAMETERS:
#	$1 	action
#	$2 	script
#	$3 	exec_msg
#===============================================================================
function call_script_server() {
	local action="$1"
	local script="$2"
	local exec_msg="$3"

	ssh 2>&1 -T -i "$sshprivatekey_path" ${sshuser}@${sshaddress} -p ${sshport} "bash ${sshcmd} -h \"${hostname}\" -M \"${mac}\" -r \"${repository}\" $([ "${action}" ] && echo "-a \""${action}"\"") $([ "${script}" ] && echo "-s \""${script}"\"") $([ "${exec_msg}" ] && echo "-m \""${exec_msg}"\"")  $([ "${agent_version}" ] && echo "-v \""${agent_version}"\"")" 
	return $?
}


#=== FUNCTION ==================================================================
#        NAME: wait_connection
# DESCRIPTION: wait until server connection is active
#===============================================================================
function wait_connection() {
	n=10	# Number of tries
	d=10	# Delay in seconds in each time

	for i in $(seq 1 $n); do
		nc -z "$sshaddress" "$sshport" &>/dev/null && return 0
		echo "Waiting for server connection..."
		sleep $d
	done
	echo -e "\e[1m\e[31mTimeout waiting for server connection\e[0m"
	exit 1
}




#=== FUNCTION ==================================================================
#        NAME: initialize
# DESCRIPTION: performs init checks
#===============================================================================
function initialize() {
	# CHECK ROOT
	if [ ! "$UID" -eq 0 ]; then
		echo -e "\e[1m\e[31mMust be exec with administrative privileges\e[0m"
		exit 1
	fi
		
	# CHECK SSH PRIVATE KEY
	if ! ssh-keygen -l -f "$sshprivatekey_path" 1>/dev/null; then
		echo -e "\e[1m\e[31mError loading SSH agent private key: $sshprivatekey_path\e[0m"
		exit 1
	fi
	
	# WAIT CONNECTION
	wait_connection

	# GET DEFAULT MAC ADDRESS
	mac=$(ip -c=never addr show dev $(ip -c=never -o -4 route get "8.8.8.8" | egrep -o "dev ([[:alnum:]])*" | awk '{print $2}') | grep link/ether | awk '{print $2}')
	if [ $? -ne 0 ] || [ "${mac#[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]}" ]; then
		echo -e "\e[1m\e[31mError getting local MAC address $MAC\e[0m"
		exit 1		
	fi
}



#=== FUNCTION ==================================================================
#        NAME: main
# DESCRIPTION: main code
#===============================================================================
function main() {
	# INIT
	initialize

	# GET PENDING SCRIPT LIST
	echo -e "\e[1mGetting pending scripts list...\e[0m"
	call_output=$(call_script_server "list")
	if [ $? -ne 0 ]; then
		echo -e "\e[1m\e[31mError getting pending scripts list\e[0m"
		echo "$call_output"
		log "list_error" "" "$call_output"
		exit 1
	fi
	script_list="$call_output"
	log "list_ok" "" "$script_list"
	if [ ! "$script_list" ]; then
		echo "0 pending scripts"
		exit 0
	fi
	echo "$script_list"

	# GET AND EXEC SCRIPTS
	IFS2="$IFS"; IFS=$'\n';
	for script in $script_list; do
		echo
		echo "##########################################################################"

		# GET SCRIPT CODE
		echo -e "\e[1mGetting script code for:\e[0m $script"
		script_code=$(call_script_server "get" "$script")
		if [ $? -ne 0 ]; then
			echo -e "\e[1m\e[31mError getting script code $script\e[0m"
			echo "$script_code"
			log "get_error" "$script" "$script_code"
			continue
		fi
		echo -e "$script: $(echo "$script_code" | wc -l) lines"
		echo

		# EXEC SCRIPT
		echo -e "\e[1mExecuting  script code for:\e[0m $script"
		exec_msg=$(echo "$script_code" | bash 2>&1)
		exec_code=$?
		echo "$exec_msg"
		if [ $exec_code -eq 0 ]; then 
			log "exec_ok" "$script"
			call_script_server "exec_ok" "$script"
		else
			echo -e "\e[1m\e[31mError executing script code $script\e[0m"
			log "exec_error" "$script" "$exec_msg"
			exec_msg_min="${exec_msg//$'\n'/ \\ }"; exec_msg_min="${exec_msg_min:0:50}"
			call_script_server "exec_error" "$script" "${exec_msg_min} ..."
		fi
	done
	IFS="$IFS2"
	echo
}

main "$@"
